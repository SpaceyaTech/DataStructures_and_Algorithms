/*
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.
*/

class Solution {
  
    public int findMin(int[] nums, int start, int end) {
      if(start == end)
        return nums[start];
      
      int mid = (start+end)/2;
      
      int lmin = Math.min(nums[start], nums[mid]);   //left arr min
      int rmin = Math.min(nums[mid+1], nums[end]);
      return lmin > rmin  ? findMin(nums, mid+1, end) : findMin(nums, start, mid);
      
    }
    public int findMin(int[] nums) {
        return findMin(nums, 0, nums.length-1);
    }
}

====================================================================================

class Solution {
  
  public int findMin(int[] nums, int start, int end){
    while(start<end){
      int mid = (start+end)/2;
      
      int min=nums[mid], min1 = Integer.MIN_VALUE, min2=Integer.MIN_VALUE;
      
      if(start< mid)
        min1 = Math.min(nums[start], nums[mid-1]);
      
      if(end> mid)
        min2 = Math.min(nums[end], nums[mid+1]);
      
      if(min1!=Integer.MIN_VALUE && min2!=Integer.MIN_VALUE){
        if(min< min1 && min<min2){
          return nums[mid];
      }
    }
      
      if(min1==Integer.MIN_VALUE && min<min2){
          return nums[mid];
      }
      
      if(min2==Integer.MIN_VALUE && min<min1){
          return nums[mid];
      }
      
      if(min1!=Integer.MIN_VALUE && min1<min2){
        end = mid-1;
      }
      else{
        start=mid+1;
      }
    }
    return nums[start];
  }
  
  public int findMin(int[] nums) {
    return findMin(nums, 0, nums.length-1);
  }
}
