/*
You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000
*/

/*
Middle of the Linked List.

Reverse Linked List(Second half).

Merge Two Sorted Lists.

*/
class Solution {
  
    public ListNode findMiddle(ListNode head){
      ListNode slow=head, fast=head;
      while(fast.next!=null && fast.next.next!=null){
        slow = slow.next;
        fast = fast.next.next;
      }
      return slow;
    }
  
    public ListNode reverse(ListNode node){
      ListNode curr= node, next=node, prev=null;
      while(curr!=null){
        next =curr.next;
        curr.next=prev;
        prev=curr;
        curr=next;
      }
      return prev;
    }
  
    public void mergeLists(ListNode node1, ListNode node2){
      ListNode H1p= node1;
      ListNode H1n = node1.next;
      
      ListNode H2p= node2;
      ListNode H2n = node2.next;
      
      while(H1p!=null && H2p!=null){
        H1p.next = H2p;
        H2p.next = H1n;
        H1p=H1n;
        if(H1p!=null)
          H1n=H1n.next;
        H2p=H2n;
        if(H2p!=null)
          H2n=H2n.next;
      }      
    }
  
    public void reorderList(ListNode head) {
      if(head==null || head.next == null)
          return;
        ListNode mid = findMiddle(head);
        ListNode secList = mid.next;
        mid.next = null;
       secList = reverse(secList);
       mergeLists(head, secList);
    }
}
