/*
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
*/

https://leetcode.com/problems/remove-k-digits/solution/

class Solution {
    public String removeKdigits(String num, int k) {
        if(k==0)
          return num;
      
        if(num.length() == k)
          return "0";
      
        Stack<Character> st = new Stack<>();
        for(int i=0;i<num.length();i++){
          char ch = num.charAt(i);
          while(!st.isEmpty() && k>0 && st.peek() > ch){
            st.pop();
            k--;
          }
          st.push(ch);
        }
      while(k>0){
        st.pop();
        k--;
      }
      StringBuilder sb = new StringBuilder();
      while(!st.isEmpty()){
        sb.append(st.pop());
      }
      sb=sb.reverse();
      while(sb.length()> 1 && sb.charAt(0)=='0'){
        sb.deleteCharAt(0);
      }
      return String.valueOf(sb);
    }
}

===========================================================================

class Solution {
    public String removeKdigits(String num, int k) {
        if (k == 0 || num == null)
            return num;
        if (k == num.length())
            return "0";
        Stack < Integer > st = new Stack < Integer > ();
        int[] ch = new int[num.length()];
        for (int i = 0; i < num.length(); i++) {
            ch[i] = Character.getNumericValue(num.charAt(i));
        }
        st.push(ch[0]);
        int i = 1;

        while (i < ch.length) {
            while (!st.isEmpty() && i < ch.length && st.peek() > ch[i] && k > 0) {
                st.pop();
                k--;
            }
            st.push(ch[i]);
            i++;

        }
        if (st.size() == 0)
            return "0";
        StringBuffer sb = new StringBuffer();
        while (!st.isEmpty()) {
            sb.append(st.pop());
        }
        while (sb.length() > 0 && sb.charAt(sb.length() - 1) == '0') {
            sb.deleteCharAt(sb.length() - 1);
        }
        sb.reverse();
        if (k > 0 && sb.length() >= k) {
            sb.delete(sb.length() - k, sb.length());
        }
        if (sb.length() == 0)
            return "0";
        return new String(sb);

    }
}
