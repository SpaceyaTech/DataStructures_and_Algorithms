/*
There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5
   Hide Hint #1  
This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.
   Hide Hint #2  
Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.
   Hide Hint #3  
Topological sort could also be done via BFS.
*/

https://youtu.be/EgI5nU9etnU

class Solution {
  
    public boolean isCyclic(List<List<Integer>> adj , int i, boolean[] visited, boolean[] recStack ){
      if(recStack[i] == true){
        return true;
      }
      if(visited[i]==true){
        return false;
      }
      visited[i]=true;
      recStack[i]=true;
      for(int idx : adj.get(i)){
          if(isCyclic(adj,idx,visited,recStack))
            return true;
        }
      
      recStack[i]=false;
      return false;
    }
  
    public boolean canFinish(int numCourses, int[][] prerequisites) {
      
        List<List<Integer>> adj = new ArrayList();
        
         for(int i=0;i<numCourses;i++){
           adj.add(new ArrayList<>());
         }
      
        for(int[] pre: prerequisites){
          adj.get(pre[0]).add(pre[1]);
        }
      
        boolean[] visited = new boolean[numCourses];
      boolean[] recStack = new boolean[numCourses];
      
        for(int i=0;i<numCourses;i++){
            if(isCyclic(adj, i, visited, recStack))
              return false;
          }
      return true;
    }
}

=============================================================================

import java.util.*;

class Solution {

	public static boolean detectCycle(int i, boolean[] visited, boolean[] recStack,
			HashMap<Integer, ArrayList<Integer>> hm) {
		if (recStack[i] == true)
			return true;
		if (visited[i] == true)
			return false;
		recStack[i] = true;
		visited[i] = true;
		List<Integer> li = hm.containsKey(i) ? hm.get(i) : new ArrayList<Integer>();
		for (int ele : li) {
			if (detectCycle(ele, recStack, visited, hm)) {
				return true;
			}
		}
		recStack[i] = false;
		return false;
	}

	public static boolean canFinish(int numCourses, int[][] prerequisites) {
		HashMap<Integer, ArrayList<Integer>> hm = new HashMap<Integer, ArrayList<Integer>>();
		for (int i = 0; i < prerequisites.length; i++) {
			ArrayList<Integer> li;
			if (!hm.containsKey(prerequisites[i][0])) {
				li = new ArrayList<Integer>();
				li.add(prerequisites[i][1]);
				hm.put(prerequisites[i][0], li);
			} else {
				li = hm.get(prerequisites[i][0]);
				li.add(prerequisites[i][1]);
				hm.put(prerequisites[i][0], li);
			}
		}

		boolean[] visited = new boolean[numCourses];
		boolean[] recStack = new boolean[numCourses];

		for (int i = 0; i < numCourses; i++) {
			if (!visited[i]) {
				if (detectCycle(i, recStack, visited, hm) == true) {
					return false;
				}
			}
		}
		return true;
	}

	public static void main(String args[]) {
		System.out.print(canFinish(2, new int[][] { { 0, 1 } }));
	}
}
