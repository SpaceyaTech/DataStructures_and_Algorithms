/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

   Hide Hint #1  
Try to utilize the property of a BST.
   Hide Hint #2  
Try in-order traversal. (Credits to @chan13)
   Hide Hint #3  
What if you could modify the BST node's structure?
   Hide Hint #4  
The optimal runtime complexity is O(height of BST).
*/


class Solution {
    static int i = 0;
    static int ans = 0;
    public void inorder(TreeNode root, int k) {
        if (root == null)
            return;
        kthSmallest(root.left, k);
        i++;
        if (k == i) {
            ans = root.val;

        }
        kthSmallest(root.right, k);

    }
    public int kthSmallest(TreeNode root, int k) {
        inorder(root, k);
        return ans;
    }
}

=================================================

class Solution {
    private int counter =0;
    private TreeNode target = null;
    public int kthSmallest(TreeNode root,int k) {
        inorderTraversal(root,k);
        return target.val;
    }

    private void inorderTraversal(TreeNode root,int k){
        if(root == null || target != null) return;
        inorderTraversal(root.left,k);
        counter++;
        if(counter == k && target == null)
            target = root;
        inorderTraversal(root.right,k);
    }
}
