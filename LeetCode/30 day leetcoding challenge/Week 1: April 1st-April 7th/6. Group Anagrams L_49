/*
Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.
*/

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
      HashMap<String, List<String>> hm = new HashMap<String, List<String>>();
      for(String s : strs)
      {
        char[] value = as.toCharArray();
        Arrays.sort(value);
        String key = String.valueOf(value);
        List<String> li;
        if(hm.containsKey(key))
          li = hm.get(key);
        else
          li = new ArrayList<String>();
        li.add(s);
        hm.put(key, li);
      }
      List<List<String>> res =  new ArrayList<List<String>>();
      for(Map.Entry<String, List<String>> e : hm.entrySet())
      {
        res.add(e.getValue());
      }
      return res;      
    }
}


================================================================================================


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        HashMap<String, List<String>> hm = new HashMap<>();
        for(String str: strs){
          char[] ch = str.toCharArray();
          Arrays.sort(ch);
          String s = String.valueOf(ch);
          if(!hm.containsKey(s)){
            hm.put(s, new ArrayList<String>());
          }
            hm.get(s).add(str);
        }
      return new ArrayList(hm.values());
    }
}

===========================================================================

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        int[] count = new int[26];
        for (String s : strs) {
            Arrays.fill(count, 0);
            for (char c : s.toCharArray()) count[c - 'a']++;

            StringBuilder sb = new StringBuilder("");
            for (int i = 0; i < 26; i++) {
                sb.append('#');
                sb.append(count[i]);
            }
            String key = sb.toString();
            if (!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s);
        }
        return new ArrayList(ans.values());
    }
}

*Time Complexity: 
O(NKlogK), where 
N is the length of strs, and 
K is the maximum length of a string in strs. The outer loop has complexity 
O(N) as we iterate through each string. Then, we sort each string in 
O(KlogK) time.

Space Complexity: 
O(NK), the total information content stored in ans. 
