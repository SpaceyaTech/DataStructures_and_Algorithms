https://www.youtube.com/watch?v=9-grHHGUVls

/*
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:
The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.

Example 1:
Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]

Example 2:
Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.

Example 3:
Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]
*/


https://www.youtube.com/watch?v=fNVs1J2KCyo -TechDose

class Solution {
  
  Trie node = new Trie();
  class Trie{
    Trie[] children = new Trie[26];
    boolean word;
  }
    
    public void insert(String word){
      Trie curr=node;
      for(char ch:word.toCharArray()){
        if(curr.children[ch-'a']==null){
          curr.children[ch-'a'] = new Trie();
        }
        curr = curr.children[ch-'a'];
      }
      curr.word=true;
    }
    
    public boolean search(String word){
      Trie curr=node;
      for(char ch:word.toCharArray()){
        if(curr.children[ch-'a']==null){
          return false;
        }
        curr = curr.children[ch-'a'];
      }
      return curr.word;
    }
  
  
  public void solve(String s, String st, int idx, List<String> ans){
    if(idx==s.length()){
      ans.add(st);
      return;
    }
    
    st+=" ";
    for(int i=idx;i<s.length();i++){
      if(search(s.substring(idx, i+1)))
        solve(s, st+s.substring(idx, i+1),i+1,ans);
    }
  }
  
    public List<String> wordBreak(String s, List<String> wordDict) {
      
        for(String word:wordDict){
          insert(word);
        }
      
         List<String> ans = new ArrayList();
        for(int i=0;i<s.length();i++){
          if(search(s.substring(0, i+1)))
            solve(s, s.substring(0,i+1), i+1, ans);
        }
      return ans;
    }
}

================================================================================

class Solution {
   public List<String> wordBreak(String s, List<String> wordDict) {
		List<String> result = new ArrayList<>();
		wordBreakHelper(s, wordDict, result, new StringBuilder());
		return result;
	}

	private void wordBreakHelper(String s, List<String> wordDict, List<String> result, StringBuilder current) {
		if (s.equals("")) {
			// We do this because we don't want to add space on the last word
			current.deleteCharAt(current.length() - 1);
			result.add(current.toString());
			return;
		}
		for (String word : wordDict) {
			if (s.indexOf(word) == 0) {
				current.append(word);
				current.append(" ");
				wordBreakHelper(s.substring(word.length(), s.length()), wordDict, result, new StringBuilder(current));
				// We do this because we want to remove the last added space and the last word
				current.delete(current.length() - word.length() - 1, current.length());
			}
		}
		return;
	}
}

==================================================================================

class Solution {
    Map < String, List < String >> dp = new HashMap();
    public List < String > wordBreak(String s, List < String > wordDict) {
        if (dp.containsKey(s))
            return dp.get(s);
        List < String > result = new ArrayList();
        for (String w: wordDict) {
            if (s.length() >= w.length() && s.substring(0, w.length()).equals(w)) {
                if (w.length() == s.length()) {
                    result.add(w);
                } else {
                    List < String > tmp = wordBreak(s.substring(w.length()), wordDict);
                    for (String t: tmp) {
                        result.add(w + " " + t);
                    }
                }
            }
        }
        dp.put(s, result);
        return result;
    }
}

//Ola Interview

package xyz;
import java.util.*;

public class Interview {
	

	public static void generateSentence(String s , int start, String result, HashSet<String> dict, ArrayList<String> ans){
	if(start == s.length())
		{
			ans.add(result);
			return;
		}
	
	for(int i=start ; i< s.length(); i++){
		 String temp = s.substring(start, i+1);
		 if(dict.contains(temp)) {
			 if(start == 0)
				 result = "";
			 result += result.isEmpty() ?  temp  : " "+temp;
			 generateSentence(s, i+1, result, dict, ans);
		 }
	}
}

	public static void main(String args[]) {
		HashSet<String> dict = new HashSet<>();
		makeDictionary(dict);
		ArrayList<String> ans = new ArrayList<String>();
		generateSentence("catsanddog", 0, "", dict, ans);
		for(String s: ans) {
			System.out.println(s);
		}
	}

	private static void makeDictionary(HashSet<String> dict) {
		dict.add("cat");
		dict.add("cats");
		dict.add("and");
		dict.add("sand");
		dict.add("dog");
	}
}
