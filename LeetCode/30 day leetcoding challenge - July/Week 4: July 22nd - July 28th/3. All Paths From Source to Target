https://www.youtube.com/watch?v=SZ3zpzQk2jg

/*
Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

Example:
Input: [[1,2], [3], [3], []] 
Output: [[0,1,3],[0,2,3]] 
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Note:

The number of nodes in the graph will be in the range [2, 15].
You can print different paths in any order, but you should keep the order of nodes inside one path.
*/

class Solution {

    public void allPathsSourceTargetHelper(int[][] graph, List<List<Integer>> res, List<Integer> temp, int src, int dest) {
        temp.add(src);
        if (src == dest) {
            res.add(new ArrayList<>(temp));
            return;
        }

        for (int i : graph[src]) {
                allPathsSourceTargetHelper(graph, res, temp, i, dest);
            
            temp.remove(temp.size() - 1);
        }
    }

    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        int n = graph.length;
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList();
        allPathsSourceTargetHelper(graph, res, temp, 0, n - 1);
        return res;
    }
}
 
 ===================================================================
 
class Solution {
    public static void dfs(int[][] graph, List<List<Integer>> result, List<Integer> path, int v)
    {
      path.add(v);
      if(v==graph.length-1)
        result.add(new ArrayList(path));
      else
        for(int u :graph[v])
          dfs(graph, result, path, u);
      path.remove(path.size()-1);
    }
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> path = new ArrayList();
        dfs(graph, result, path, 0);
        return result;
    }
}
