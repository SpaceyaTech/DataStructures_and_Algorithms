https://www.youtube.com/watch?v=XY297u8qRDI

https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/submissions/

/*
You have n dice and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.

Example 1:

Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:

Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.
 
Constraints:
1 <= n, k <= 30
1 <= target <= 1000
*/

class Solution {
    int res = 0;

    public int numRollsToTargetHelper(int dice, int faces, int target) {
        if (target < 0) return 0;

        if (dice == 0 && target != 0) return 0;
        if (dice == 0 && target == 0) return 1;

        int ans = 0;
        for (int i = 1; i <= faces; i++) {
            ans = ans + numRollsToTargetHelper(dice - 1, faces, target - i);
        }
        return ans;
    }

    public int numRollsToTarget(int d, int f, int target) {
        return numRollsToTargetHelper(d, f, target);
    }
}

==================================================================

class Solution {
    int res = 0;

    public int numRollsToTargetHelper(int dice, int faces, int target, int[][] dp) {
        if (target < 0) return 0;

        if (dice == 0 && target != 0) return 0;
        if (dice == 0 && target == 0) return 1;

      if(dp[dice][target]!=-1)
        return dp[dice][target];
        int ans = 0;
        for (int i = 1; i <= faces; i++) {
          int res = numRollsToTargetHelper(dice - 1, faces, target - i, dp)% 1000000007;
          ans += res;
          ans = ans % 1000000007;
        }
        return dp[dice][target]=ans;
    }

    public int numRollsToTarget(int d, int f, int target) {
        int[][] dp = new int[d+1][target+1];
        for(int[] i :dp){
          Arrays.fill(i,-1);
        }
        return numRollsToTargetHelper(d, f, target, dp);
    }
}

==================================================================

class Solution {
    int res = 0;

    public int numRollsToTargetHelper(int d, int f, int t) {
        int[][] dp = new int[d + 1][t + 1];

        dp[0][0] = 1;

        for (int dice = 1; dice <= d; dice++) {
            for (int target = 1; target <= t; target++) {
              int ans = 0;
              for(int i=1;i<=f;i++){
                if(target-i >=0){
                  ans  = (ans+dp[dice-1][target-i]) % 1000000007;
                  ans = ans % 1000000007;
                }
              }
              dp[dice][target]=ans;
            }
        }
      return dp[d][t]% 1000000007;
    }

    public int numRollsToTarget(int d, int f, int target) {
        return numRollsToTargetHelper(d, f, target);
    }
}
