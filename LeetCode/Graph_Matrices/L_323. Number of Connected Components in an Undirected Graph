https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/

/*
You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.

Return the number of connected components in the graph.

 

Example 1:


Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2
Example 2:


Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1
 

Constraints:

1 <= n <= 2000
1 <= edges.length <= 5000
edges[i].length == 2
0 <= ai <= bi < n
ai != bi
There are no repeated edges.
*/

class Solution {
    public void dfs(int i, boolean[] visited,  List<List<Integer>> ls){
        if(visited[i]==true)
            return;
        
        visited[i] = true;
        for(int ele : ls.get(i)){
            if(!visited[ele]){
                dfs(ele, visited, ls);
            }
        }
    }
    public int countComponents(int n, int[][] edges) {
        int count = 0;
        List<List<Integer>> ls = new ArrayList<>();
        for(int i=0;i<n;i++){
            ls.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            ls.get(edges[i][0]).add(edges[i][1]);
            ls.get(edges[i][1]).add(edges[i][0]);
        }
        boolean[] visited = new boolean[n];
        for(int i=0;i<n;i++){
            if(!visited[i]){
                count++;
                dfs(i, visited, ls);
            }
        }
        return count;
    }
}
