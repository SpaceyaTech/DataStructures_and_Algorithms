https://www.youtube.com/watch?v=ZRK5t8svQ9o

/*
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
Design an algorithm to find the maximum profit. You may complete at most k transactions.
Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:
Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

Constraints:
0 <= k <= 109
0 <= prices.length <= 104
0 <= prices[i] <= 1000
*/

class Solution {
    public int maxProfit(int k, int[] prices) {
        int len = prices.length;
        if (k == 0 || len <= 1) {
            return 0;
        }
        int profit = 0;
        if (k >= len / 2) {
            for (int i = 0; i < len - 1; i++) {
                if (prices[i] < prices[i + 1]) {
                    profit += prices[i + 1] - prices[i];
                }
            }
            return profit;
        }
        int[] buy = new int[k];
        Arrays.fill(buy, Integer.MIN_VALUE);
        int sell[] = new int[k];
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < k; j++) {
                buy[j] = Math.max(buy[j], j == 0 ? 0 - prices[i] : sell[j - 1] - prices[i]);
                sell[j] = Math.max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k - 1];
    }
}


===============================================================================================

https://takeuforward.org/data-structure/buy-and-sell-stock-iv-dp-38/

https://www.youtube.com/watch?v=-uQGzhYj8BQ&t=208s

class Solution {

    public int maxProfit(int k, int[] prices) {
      int n=prices.length;
        int[][][] dp = new int[n+1][2][k+1];
      for(int i=n-1;i>=0;i--){
        for(int j=0;j<2;j++){
          for(int ki=1;ki<=k;ki++){
            
      if(j==0){
        dp[i][j][ki] = Math.max(0+dp[i+1][0][ki], 
                    -prices[i] + dp[i+1][1][ki]);
    }
    
    if(j==1){
         dp[i][j][ki] =Math.max(0+dp[i+1][1][ki],
                    prices[i] + dp[i+1][0][ki-1]);
    }
          }
        }
      }
        return dp[0][0][k];

    }
}
