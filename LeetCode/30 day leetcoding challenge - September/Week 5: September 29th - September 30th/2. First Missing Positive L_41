https://leetcode.com/problems/first-missing-positive/discuss/871770/JAVA-Easy-or-Both-bruteForce-and-Optimize-Solution-or-0ms-(100)

/*
Given an unsorted integer array, find the smallest missing positive integer.

Example 1:
Input: [1,2,0]
Output: 3

Example 2:
Input: [3,4,-1,1]
Output: 2

Example 3:
Input: [7,8,9,11,12]
Output: 1

Follow up:
Your algorithm should run in O(n) time and uses constant extra space.

Hint #1  
Think about how you would solve the problem in non-constant space. Can you apply that logic to the existing space?

Hint #2  
We don't care about duplicates or non-positive integers

Hint #3  
Remember that O(2n) = O(n)
*/

class Solution {
  
    public boolean checkOne(int[] nums){
      for(int i=0;i<nums.length;i++){
        if(nums[i]==1)
          return true;
      }
      return false;
    }
  
    public void makeOnes(int[] nums){
      for(int i=0;i<nums.length;i++){
        if(nums[i]<=0 || nums[i]>nums.length){
          nums[i]=1;
        }
      }
    }
  
    public int firstMissingPositive(int[] nums) {
        int n=nums.length;

        if(!checkOne(nums))
          return 1;
      
        makeOnes(nums);
      
        for(int i=0;i<n;i++){
          int curr = Math.abs(nums[i]);
          
          if(curr==n ){
            nums[0] = -Math.abs(nums[0]);
          }
          else {
            nums[curr]= -Math.abs(nums[curr]);
          }
        }
        for(int i=1;i<n;i++){
          if(nums[i]>0){
            return i;
          }
        }
        if(nums[0]>0)
          return n;
      
        return n+1;
    }
}

=====================================================================

class Solution {

    public int firstMissingPositive(int[] nums) {
        boolean oneExist = false;
        for (int i: nums) {
            if (i == 1) {
                oneExist = true;
            }
        }
        if (!oneExist) {
            return 1;
        }

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= 0 || nums[i] > nums.length) {
                nums[i] = 1;
            }
        }

        for (int i = 0; i < nums.length; i++) {
            int n = Math.abs(nums[i]);
            if (n == nums.length) {
                nums[0] = -1 * Math.abs(nums[0]);
            } else {
                nums[n] = -1 * Math.abs(nums[n]);
            }
        }

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > 0) {
                return i;
            }
        }
        if (nums[0] > 0) return nums.length;

        return nums.length + 1;
    }
}
