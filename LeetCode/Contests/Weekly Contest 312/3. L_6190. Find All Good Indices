https://leetcode.com/problems/find-all-good-indices/discuss/2620472/JavaPython-3-Compute-the-increase-and-decrease-array.

/*You are given a 0-indexed integer array nums of size n and a positive integer k.

We call an index i in the range k <= i < n - k good if the following conditions are satisfied:

The k elements that are just before the index i are in non-increasing order.
The k elements that are just after the index i are in non-decreasing order.
Return an array of all good indices sorted in increasing order.

 

Example 1:

Input: nums = [2,1,1,1,3,4,1], k = 2
Output: [2,3]
Explanation: There are two good indices in the array:
- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.
- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.
Note that the index 4 is not good because [4,1] is not non-decreasing.
Example 2:

Input: nums = [2,1,1,2], k = 2
Output: []
Explanation: There are no good indices in this array.
 

Constraints:

n == nums.length
3 <= n <= 105
1 <= nums[i] <= 106
1 <= k <= n / 2
*/

 public List<Integer> goodIndices(int[] nums, int k) {
        int n = nums.length;
        int[] non_dec = new int[n], non_inc = new int[n];
        Arrays.fill(non_dec, 1);
        Arrays.fill(non_inc, 1);
        for (int i = 1; i < n; ++i) {
            if (nums[i] == nums[i - 1]) {
                non_dec[i] = non_dec[i - 1] + 1;
                non_inc[i] = non_inc[i - 1] + 1;
            }else if (nums[i] < nums[i - 1]) {
                non_inc[i] = non_inc[i - 1] + 1;
            }else {
                non_dec[i] = non_dec[i - 1] + 1;
            }
        }
        List<Integer> good = new ArrayList<>();
        for (int i = k; i < n - k; ++i) {
            if (non_inc[i - 1] >= k && non_dec[i + k] >= k) {
                good.add(i);
            }
        }
        return good;
    }
