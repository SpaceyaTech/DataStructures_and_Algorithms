https://leetcode.com/problems/graph-valid-tree/

/*
You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.
Return true if the edges of the given graph make up a valid tree, and false otherwise.

Example 1:
Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false

Constraints:
1 <= n <= 2000
0 <= edges.length <= 5000
edges[i].length == 2
0 <= ai, bi < n
ai != bi
There are no self-loops or repeated edges.
*/

class Solution {
    
    public boolean hasCycle(List<List<Integer>> list, int v, boolean[] visited, int parent){
        if(visited[v] == true)
            return true;
        
        visited[v]=true;
        List<Integer> li = list.get(v);
        for(int i: li){
            if(!visited[i]){
                hasCycle(list, i, visited, v);
            }
            else{
                if(i!=parent)
                    return true;
            }
        }
        return false;
    }
    
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> list = new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new ArrayList<Integer>());
        }
        for(int i=0; i<edges.length;i++){
            list.get(edges[i][0]).add(edges[i][1]);
            list.get(edges[i][1]).add(edges[i][0]);
        }
        
        //hasCycle
        boolean[] visited = new boolean[n];
        if(hasCycle(list, 0, visited, -1)){
            System.out.print("cycle");
            return false;
        }
        //isConnected
        for(int i=0;i<n;i++){
            if(visited[i]==false){
                System.out.print(i+" cycle 2");
                return false;
            }
        }
        return true;
    }
}
