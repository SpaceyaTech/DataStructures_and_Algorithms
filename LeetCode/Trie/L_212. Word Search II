https://leetcode.com/problems/word-search-ii/solution/

/*
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 
Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.
*/

class Trie{
  Trie[] children = new Trie[26];
  String word=null;
}

class Solution {
    int[][] dir = new int[][]{{0,1}, {0,-1}, {1,0}, {-1,0}};
    public List<String> findWords(char[][] board, String[] words) {
        Trie root= new Trie();
        for(String word : words){
          Trie curr=root;
          for(char c: word.toCharArray()){
            if(curr.children[c-'a']==null){
              curr.children[c-'a']=new Trie();
            }
            curr = curr.children[c-'a'];
          }
          curr.word = word;
        }
      
       List<String> res= new ArrayList();
      for(int i=0;i<board.length;i++){
        for(int j=0;j<board[0].length;j++){
          char c = board[i][j];
          if(root.children[c-'a']!=null){
            backTrack(board, i, j, res, root);
          }
        }
      }
      return res;
    }
  
    public void backTrack(char[][] board, int i, int j, List<String> res, Trie parent){      
      char c = board[i][j];
      Trie curr = parent.children[c-'a'];
      if(curr.word!=null){
        res.add(curr.word);
        curr.word=null;
      }
      board[i][j]='#';
      for(int idx=0;idx<dir.length;idx++){
        int newI = i+dir[idx][0], newJ = j+dir[idx][1];
        if(newI<0 || newI>=board.length || newJ<0 || newJ>=board[0].length || board[newI][newJ]=='#')
          continue;
        
         char ch = board[newI][newJ];
         if(curr.children[ch-'a']!=null){
           backTrack(board,newI, newJ,res,curr);
         }
      }
      board[i][j]=c;
    }
}

===========================================================================================



class TrieNode{
  HashMap<Character, TrieNode> children = new HashMap<>();
  String word = null;
}

class Solution {
    TrieNode root;
    public List<String> findWords(char[][] board, String[] words) {
        ArrayList<String> result = new ArrayList();
        root = new TrieNode();
      
        for(String word : words){
          TrieNode curr = root;
          for(char c : word.toCharArray()){
            if(curr.children.containsKey(c)){
              curr = curr.children.get(c);
            }
            else{
              TrieNode newN = new TrieNode();
              curr.children.put(c, newN);
              curr = newN;
            }
          }
          curr.word = word;
        }
      
      for(int i=0;i<board.length ; i++){
        for(int j=0;j<board[0].length;j++){
          if(root.children.containsKey(board[i][j]))
          backTrack(i, j, board, result, root);
        }
      }
      
      return result;
    }
  
  public void backTrack(int i, int j, char[][] board, ArrayList<String> result, TrieNode parent){
      char c = board[i][j];
     TrieNode curr= parent.children.get(c);
    
    if(curr.word!=null){
      result.add(curr.word);
      curr.word = null;
    }
    board[i][j]='#';
    
    int[] row = new int[]{-1,0,1,0};
    int[] col = new int[]{0,1,0,-1};
    
    for(int idx = 0;idx<4;idx++){
      int nRow = i+row[idx];
      int nCol = j+col[idx];
      if(nRow<0 || nRow >=board.length || nCol <0 || nCol >= board[0].length)
        continue;
      
      if(curr.children.containsKey(board[nRow][nCol])){
        backTrack(nRow, nCol, board, result, curr);
      }
    }
    
    board[i][j]=c;
    
    //This if is optional, improves Time Complexity very nicely
     if(curr.children.isEmpty()){
      parent.children.remove(c);
     }
  }
}
