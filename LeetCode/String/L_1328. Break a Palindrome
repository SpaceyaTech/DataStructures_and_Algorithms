/*
Given a palindromic string palindrome, replace exactly one character by any lowercase English letter so that the string becomes the lexicographically smallest possible string that isn't a palindrome.
After doing so, return the final string.  If there is no way to do so, return the empty string.

Example 1:
Input: palindrome = "abccba"
Output: "aaccba"

Example 2:
Input: palindrome = "a"
Output: ""

Constraints:
1 <= palindrome.length <= 1000
palindrome consists of only lowercase English letters.
*/

class Solution {
    public String breakPalindrome(String palindrome) {
        if(palindrome.length()==1)
          return "";
       
       for(int i=0;i<palindrome.length();i++){
         if(palindrome.charAt(i)!='a'){
           if(palindrome.length()%2==1 && i==palindrome.length()/2)
             continue;
           return palindrome.substring(0,i)+'a'+palindrome.substring(i+1);
         }
       }
      return palindrome.substring(0,palindrome.length()-1)+'b';
    }
}

============================================================================

class Solution {
    public String breakPalindrome(String palindrome) {
        if (palindrome.length() == 1)
            return "";
        int li = -1;
        li = palindrome.length() / 2;

       for (char c: palindrome.toCharArray()) {
            if (c != 'a') {
                int index = palindrome.indexOf(c + "");
                if (index != li) {
                    return palindrome.substring(0, index) + "a" + palindrome.substring(index + 1);
                }
            }
        }
        return palindrome.substring(0, palindrome.length() - 1) + "b";
    }
}
